@page "/SellingStatistics"
@attribute [Authorize(Roles = "Admin,Seller")]
@inject DBService dbService
@inject IJSRuntime js
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@using MAGestionaleV2.Authentication
@using MAGestionaleV2.Models
@using MAGestionaleV2.Security
@using MAGestionaleV2.Services

<PageTitle>STATISTICHE</PageTitle>
@foreach (List<ProductAndRequest> ListProductAndRequest in productsAndRequests)
{
	<CardDeck Padding="Padding.Is2">
		@foreach (ProductAndRequest p in ListProductAndRequest)
		{
			@if (p.product.IsVisible)
			{
				<Card>
					<CardImage Height=Height.Is50 Width=Width.Is100 Source="@Tools.PathToURL(p.product.ImagePath)"></CardImage>
					<CardBody>
						<CardTitle Size="5">@p.product.Name.ToUpper()</CardTitle>
						<CardText>@p.product.Description.Substring(0, Math.Min(p.product.Description.Length, 25))</CardText>
						<CardText>Vendite : @p.Requests</CardText>
						<Button Color="Color.Danger" @onclick="()=>Remove(p)">Remove</Button>
						</CardBody>
					</Card>
			}
		}
	</CardDeck>
}
@code
{
	class ProductAndRequest
	{
		public int Requests;
		public Product product;
	}
	List<List<ProductAndRequest>> productsAndRequests = new();

	List<BuyRequest> requests = new();
	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		var x = await customAuthStateProvider.GetAuthenticationStateAsync();
		var y = await dbService.GetUserByUsername(x.User.Identity.Name);
		List<Product> products = await dbService.GetProductsBySeller(y.ID);
		requests = await dbService.GetRequestBySeller(y.ID);

		for (int i = 0; i < products.Count; i += 4)
		{

			List<Product> subList = products.GetRange(i, Math.Min(4, products.Count - i));
			List<ProductAndRequest> pAndr = new();
			foreach (Product p in subList)
			{
				pAndr.Add(new ProductAndRequest
					{
						product = p,
						Requests = requests.Where(r => r.IDproduct == p.ID).Count(),
					});
			}
			productsAndRequests.Add(pAndr);
		}
		productsAndRequests = productsAndRequests.OrderBy(list => list.Count).ToList();

	}
	async Task Remove(ProductAndRequest prod)
	{
		await dbService.RemoveProduct(prod.product);
		navManager.NavigateTo("/SellingStatistics");
	}
}
