@page "/SellingStatistics"
@attribute [Authorize(Roles = "Admin,Seller")]
@inject DBService dbService
@inject IJSRuntime js
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@using MAGestionale.Authentication
@using MAGestionaleV2.Models
@using MAGestionale.Security
@using MAGestionale.Services

<PageTitle>STATISTICHE</PageTitle>
<CardDeck>
    @foreach (ProductAndRequest p in products)
	{
        @if (p.product.IsVisible)
        {
            <Card>
                <CardImage Height=Height.Is50 Width=Width.Is100 Source="@Tools.PathToURL(p.product.ImagePath)"></CardImage>
                <CardBody>
                    <CardTitle Size="5">@p.product.Name.ToUpper()</CardTitle>
                    <CardText>
                        @p.product.Description
                    </CardText>
                    <CardText>@p.Requests</CardText>
                    <Button @onclick="()=>Remove(p)">Remove</Button>
                </CardBody>
            </Card>
        }
	}
</CardDeck>

@code
{
    class ProductAndRequest
	{
		public int Requests;
        public Product product;
	}
    List<ProductAndRequest> products = new();
	List<BuyRequest> requests = new();
	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		var x = await customAuthStateProvider.GetAuthenticationStateAsync();
		var y = await dbService.GetUserByUsername(x.User.Identity.Name);
		List<Product> p = await dbService.GetProductsBySeller(y.ID);
		requests = await dbService.GetRequestBySeller(y.ID);
		foreach (Product z in p)
		{
            products.Add(new ProductAndRequest
				{
                    product = z,
                    Requests = requests.Where(r => r.IDproduct == z.ID).Count(),
				});
		}

	}
    async Task Remove(ProductAndRequest product)
    {
        products.Remove(product);
        await dbService.RemoveProduct(product.product);
    }
}
